'*****************************************************************************************************************************
'**	H I S T O R Y
'*****************************************************************************************************************************
'	04-09-2014 14:02:01:	- Renamed RBNClearCustomButtons to RBNClearCustomRibbonElements
'						- Fixed these functions to work with controls of type IRibbonButtonControl as well as IRibbonToolButtonControl:
'							- RBNSetControlIcons
'							- RBNSetControlCustomMBXHandler
'	13-09-2014 13:40:41		- RBNAddTab now takes a KeyTip in stead of a ToolTip string
'						- RBNAddTab now returns an integer pointing at the modular index of the tab
'						- RBNAddGroup now returns an integer pointing at the modular index of the group
'						- These functions now also take a KeyTip
'							- RBNAddControl(...) As Integer
'							- RBNInsertControl(..) As Integer
'							- RBNInsertControlAfter(..) As Integer
'							- RBNInsertControlBefore(..) As Integer
'							- RBNAddButton(..) As Integer
'							- RBNInsertButton() As Integer
'							- RBNInsertButtonAfter(..) As Integer
'							- RBNInsertButtonBefore(..) As Integer
'							- RBNAddButtonContext(...)
'						- Added these procedures:
'							- RBNSetTabToolTipName(...)
'							- RBNSetTabToolTipIdx(...)
'							- RBNSetGroupToolTipName(...)
'							- RBNSetGroupToolTipIdx(...)
'	14-09-2014 13:05:02		- Added the prcedures:
'							- RBNEnableControl(...)
'							- RBNEnableControlsName(...)
'							- RBNEnableControlName(...)
'							- RBNEnableControlIdx(...)
'						- and these private functions
'							- RBNGetElementIndex(...) As Integer
'							- RBNGetElementIndexOffset(...) As Integer
'	23-09-2014 20:42:00		- RBNClearCustomRibbonElements:
'							- If the rbnControlsColl isn't empty, the Group isn't removed
'							- If the rbnGroupsColl isn't empty, the Tab isn't removed
'						- Added:
'							- RBNEventSubscribe() As Logical
'							- RBNEventUnsubscribe() As Logical
'							- RBNEventUnsubscribeAll() As Logical
'							- RBNEndHandler
'							- RBNGetTableEventArgsTableAlias(...) As String
'*****************************************************************************************************************************


'Requires MapInfo Pro 12.5 x64
' mapInfoApplication has a Ribbon
' theRibbon As a collection of Tabs
' theTabCollection holds a number of Tabs
' a Tab has a collection of Groups
' a GroupCollection holds a numer of Controls
' a Control can be of a number of types
'
'**** A D D I N G    T A B S  ,    G R O U P S    A N D    C O N T R O L S
'	nCtrlIdx = RBNAddButton("exportMapToExcel", "MS Excel", "TabMap", "MapClipboard")
'	If nCtrlIdx > 0 Then
'		'Create & Set the button tooltip
'		Call RBNSetControlToolTipIdx(nCtrlIdx, RESSTRNGGetString(STR_MNU_EXPORT_MAP_TO_XLS), "", "")
'		'Set the button icon
'		Call RBNSetControlIconsIdx(nCtrlIdx, TRUE, PATH_IMAGES & "MapWindowExcel_16.bmp", PATH_IMAGES & "MapWindowExcel_24.bmp")
'		'Set Custom MapBasic Handle to the button
'		Call RBNSetControlCustomMBXHandlerIdx(nCtrlIdx, "MENUExportMapWindowToExcel")
'	End If
'
'	nCtrlIdx = RBNInsertButtonBefore("exportBrowserToExcel", "MS Excel", "TabTable", "TableData", "ExportButton")
'	If nCtrlIdx > 0 Then
'		'Create & Set the button tooltip
'		Call RBNSetControlToolTipIdx(nCtrlIdx, RESSTRNGGetString(STR_MNU_EXPORT_BROWSER_TO_XLS), "", "")
'		'Set the button icon
'		Call RBNSetControlIconsIdx(nCtrlIdx, FALSE, PATH_IMAGES & "BrowserWindowExcel_16.bmp", PATH_IMAGES & "BrowserWindowExcel_24.bmp")
'		'Set Custom MapBasic Handle to the button
'		Call RBNSetControlCustomMBXHandlerIdx(nCtrlIdx, "MENUExportBrowserDataToExcel")
'	End If
'
'	If RBNAddTab("TabTools", "TOOLS", "TO") > 0 Then
'		If RBNAddGroup(xProgramMenu, xProgramMenu, "TabTools") > 0 Then
'			nCtrlIdx = RBNAddButton("exportTableToExcel", "Table", "TabTools", xProgramMenu)
'			If nCtrlIdx > 0 Then
'				'Create & Set the button tooltip
'				Call RBNSetControlToolTipIdx(nCtrlIdx, RESSTRNGGetString(STR_MNU_EXPORT_TAB_TO_XLS), "", "")
'				'Set the button icon
'				Call RBNSetControlIconsIdx(nCtrlIdx, TRUE, PATH_IMAGES & "BrowserWindowExcel_16.bmp", PATH_IMAGES & "BrowserWindowExcel_24.bmp")
'				'Set Custom MapBasic Handle to the button
'				Call RBNSetControlCustomMBXHandlerIdx(nCtrlIdx, "MENUExportTableToExcel")
'			End If
'		End if
'	End if
'
'**** C L E A R I N G    T H E    A D D E D    T A B S  ,    G R O U P S    A N D    C O N T R O L S
'	Call RBNClearCustomRibbonElements


Define		RBN_ELEMENT_NOT_FOUND		-1

Declare Sub RBNLoop
Declare Sub RBNLoopContext

Declare Function RBNAddTab(		  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							) As Integer					'Returns the modular Idx of the tab or 0, if it wasn't created
Declare Sub RBNSetTabToolTipName(	  ByVal sTabName As String
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)
Declare Sub RBNSetTabToolTipIdx(	  ByVal nTabIdx As Integer		'The tabIdx returned by RBNAddTab
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)

Declare Function RBNAddGroup(		  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created
Declare Sub RBNSetGroupToolTipName(  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)
Declare Sub RBNSetGroupToolTipIdx(	  ByVal nGroupIdx As Integer		'The groupIdx returned by RBNAddGroup
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)

Declare Function RBNAddControl(	  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Declare Function RBNInsertControl(	  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal nPosition As Integer
							) As Integer
Declare Function RBNInsertControlAfter(  ByVal sName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameAfter As String
								) As Integer				'Returns the modular Idx of the control or 0, if it wasn't created
Declare Function RBNInsertControlBefore( ByVal sName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameBefore As String
								) As Integer				'Returns the modular Idx of the control or 0, if it wasn't created

Declare Function RBNAddButton(	  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Declare Function RBNInsertButton(	  ByVal sName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal nPosition As Integer
							) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Declare Function RBNInsertButtonAfter(	  ByVal sName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameAfter As String
								) As Integer				'Returns the modular Idx of the control or 0, if it wasn't created
Declare Function RBNInsertButtonBefore(	  ByVal sName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameBefore As String
								) As Integer				'Returns the modular Idx of the control or 0, if it wasn't created


Declare Function RBNAddButtonContext(	  ByVal sName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								) As Integer


Declare Sub RBNSetControlToolTip(	  rbnControl As This
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)
Declare Sub RBNSetControlToolTipIdx( ByVal nElementIdx As Integer
							, ByVal sText As String
							, ByVal sDescription As String
							, ByVal sDisabledText As String)

Declare Sub RBNSetControlIcons(	  rbnControl As This
							, ByVal bIsLarge As Logical
							, ByVal sSmallIcon As String		'If you omit this, the LargeIcon will be used as the SmallIcon as well
							, ByVal sLargeIcon As String		'If you omit this, the SmallIcon will be used as the LargeIcon as well
							)
Declare Sub RBNSetControlIconsIdx(	  ByVal nElementIdx As Integer
							, ByVal bIsLarge As Logical
							, ByVal sSmallIcon As String		'If you omit this, the LargeIcon will be used as the SmallIcon as well
							, ByVal sLargeIcon As String		'If you omit this, the SmallIcon will be used as the LargeIcon as well
							)

Declare Sub RBNSetControlCustomMBXHandler(	  ByVal rbnControl As This
									, ByVal sMBXHandler As String)
Declare Sub RBNSetControlCustomMBXHandlerIdx(  ByVal nElementIdx As Integer
									, ByVal sMBXHandler As String)
Declare Sub RBNSetControlDrawMode(		  ByVal rbnControl As This
								, ByVal nDrawMode As Integer)
Declare Sub RBNSetControlDrawModeIdx(	  ByVal nElementIdx As Integer
								, ByVal nDrawMode As Integer)
Declare Sub RBNSetControlMICursor(		  ByVal rbnControl As This
								, ByVal nCursor As Integer)
Declare Sub RBNSetControlMICursorIdx(	  ByVal nElementIdx As Integer
								, ByVal nCursor As Integer)

Declare Sub RBNEnableControl(		  ByVal rbnControl As This
							, ByVal bEnabled As Logical)
Declare Sub RBNEnableControlsName(	  ByVal sTabName As String		'If "", the TAB is ignored in the search
							, ByVal sGroupName As String		'If "", the GROUP is ignored in the search
							, ByVal sControlName As String
							, ByVal bEnabled As Logical)
Declare Sub RBNEnableControlName(	  ByVal sTabName As String		'If "", the TAB is ignored in the search and the first match is used
							, ByVal sGroupName As String		'If "", the GROUP is ignored in the search and the first match is used
							, ByVal sControlName As String
							, ByVal bEnabled As Logical)
Declare Sub RBNEnableControlIdx(	  ByVal nElementIdx As Integer
							, ByVal bEnabled As Logical)


Declare Function RBNGetTab(	  ByVal sTabName As String
						, rbnTabFound As RefPtr
						) As Logical
Declare Function RBNGetTabIndex(	ByVal sTabName As String
							) As Integer
Declare Function RBNTabExists(	  ByVal sTabName As String
							) As Integer

Declare Function RBNGetGroup(	  rbnTab As This
						, ByVal sGroupName As String
						, rbnGroupFound As RefPtr
						) As Logical
Declare Function RBNGetGroupIndex(	  rbnTab As This
							, ByVal sGroupName As String
							) As Integer
Declare Function RBNGroupExists(	  rbnTab As This
							, ByVal sGroupName As String
							) As Integer

Declare Function RBNGetContextGroup( rbnTab As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Declare Function RBNGetControlIndex(	  ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sControlName As String
								) As Integer

'**** CL E A N I N G ***********************************************************************
Declare Sub RBNClearCustomRibbonElements
Declare Sub RBNEndHandler

'**** E V E N T S **************************************************************************
Declare Function RBNEventSubscribe(	  ByVal nEventType As Integer
								, ByVal sMBXHandler As String
								) As Logical
Declare Function RBNEventUnsubscribe(  	  ByVal nEventType As Integer
								, ByVal sMBXHandler As String
								) As Logical
Declare Function RBNEventUnsubscribeAll(
								) As Logical

Declare Function RBNGetTableEventArgsTableAlias(ByVal arg As This) As String